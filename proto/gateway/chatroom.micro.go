// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/chatroom.proto

/*
Package gateway is a generated protocol buffer package.

It is generated from these files:
	gateway/chatroom.proto

It has these top-level messages:
	MessageReceiveRequest
	SendMessageRequest
	GetMemberRequest
	AvailableRequest
*/
package gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.srgow.com/warehouse/proto/common"
import chatroom "gitlab.srgow.com/warehouse/proto/chatroom"
import chatroom1 "gitlab.srgow.com/warehouse/proto/chatroom"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = chatroom1.RoomListResponse{}
var _ = chatroom.MemberResponse{}
var _ = common.MessageResponse{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Member service

type MemberService interface {
	Login(ctx context.Context, in *chatroom.Member, opts ...client.CallOption) (*chatroom.LoginResponse, error)
	Logout(ctx context.Context, in *chatroom.TokenRequest, opts ...client.CallOption) (*common.Response, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...client.CallOption) (*chatroom.MemberResponse, error)
}

type memberService struct {
	c    client.Client
	name string
}

func NewMemberService(name string, c client.Client) MemberService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gateway"
	}
	return &memberService{
		c:    c,
		name: name,
	}
}

func (c *memberService) Login(ctx context.Context, in *chatroom.Member, opts ...client.CallOption) (*chatroom.LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Member.Login", in)
	out := new(chatroom.LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Logout(ctx context.Context, in *chatroom.TokenRequest, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Member.Logout", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetMember(ctx context.Context, in *GetMemberRequest, opts ...client.CallOption) (*chatroom.MemberResponse, error) {
	req := c.c.NewRequest(c.name, "Member.GetMember", in)
	out := new(chatroom.MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Member service

type MemberHandler interface {
	Login(context.Context, *chatroom.Member, *chatroom.LoginResponse) error
	Logout(context.Context, *chatroom.TokenRequest, *common.Response) error
	GetMember(context.Context, *GetMemberRequest, *chatroom.MemberResponse) error
}

func RegisterMemberHandler(s server.Server, hdlr MemberHandler, opts ...server.HandlerOption) error {
	type member interface {
		Login(ctx context.Context, in *chatroom.Member, out *chatroom.LoginResponse) error
		Logout(ctx context.Context, in *chatroom.TokenRequest, out *common.Response) error
		GetMember(ctx context.Context, in *GetMemberRequest, out *chatroom.MemberResponse) error
	}
	type Member struct {
		member
	}
	h := &memberHandler{hdlr}
	return s.Handle(s.NewHandler(&Member{h}, opts...))
}

type memberHandler struct {
	MemberHandler
}

func (h *memberHandler) Login(ctx context.Context, in *chatroom.Member, out *chatroom.LoginResponse) error {
	return h.MemberHandler.Login(ctx, in, out)
}

func (h *memberHandler) Logout(ctx context.Context, in *chatroom.TokenRequest, out *common.Response) error {
	return h.MemberHandler.Logout(ctx, in, out)
}

func (h *memberHandler) GetMember(ctx context.Context, in *GetMemberRequest, out *chatroom.MemberResponse) error {
	return h.MemberHandler.GetMember(ctx, in, out)
}

// Client API for Room service

type RoomService interface {
	Available(ctx context.Context, in *AvailableRequest, opts ...client.CallOption) (*chatroom1.RoomListResponse, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gateway"
	}
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) Available(ctx context.Context, in *AvailableRequest, opts ...client.CallOption) (*chatroom1.RoomListResponse, error) {
	req := c.c.NewRequest(c.name, "Room.Available", in)
	out := new(chatroom1.RoomListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Room service

type RoomHandler interface {
	Available(context.Context, *AvailableRequest, *chatroom1.RoomListResponse) error
}

func RegisterRoomHandler(s server.Server, hdlr RoomHandler, opts ...server.HandlerOption) error {
	type room interface {
		Available(ctx context.Context, in *AvailableRequest, out *chatroom1.RoomListResponse) error
	}
	type Room struct {
		room
	}
	h := &roomHandler{hdlr}
	return s.Handle(s.NewHandler(&Room{h}, opts...))
}

type roomHandler struct {
	RoomHandler
}

func (h *roomHandler) Available(ctx context.Context, in *AvailableRequest, out *chatroom1.RoomListResponse) error {
	return h.RoomHandler.Available(ctx, in, out)
}

// Client API for Chat service

type ChatService interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*common.Response, error)
	ReceiveMessage(ctx context.Context, in *MessageReceiveRequest, opts ...client.CallOption) (*common.MessageResponse, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gateway"
	}
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Chat.SendMessage", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) ReceiveMessage(ctx context.Context, in *MessageReceiveRequest, opts ...client.CallOption) (*common.MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.ReceiveMessage", in)
	out := new(common.MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	SendMessage(context.Context, *SendMessageRequest, *common.Response) error
	ReceiveMessage(context.Context, *MessageReceiveRequest, *common.MessageResponse) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) error {
	type chat interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, out *common.Response) error
		ReceiveMessage(ctx context.Context, in *MessageReceiveRequest, out *common.MessageResponse) error
	}
	type Chat struct {
		chat
	}
	h := &chatHandler{hdlr}
	return s.Handle(s.NewHandler(&Chat{h}, opts...))
}

type chatHandler struct {
	ChatHandler
}

func (h *chatHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *common.Response) error {
	return h.ChatHandler.SendMessage(ctx, in, out)
}

func (h *chatHandler) ReceiveMessage(ctx context.Context, in *MessageReceiveRequest, out *common.MessageResponse) error {
	return h.ChatHandler.ReceiveMessage(ctx, in, out)
}
