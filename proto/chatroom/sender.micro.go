// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chatroom/sender.proto

/*
Package chatroom is a generated protocol buffer package.

It is generated from these files:
	chatroom/sender.proto

It has these top-level messages:
	MessageReceiveRequest
*/
package chatroom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.srgow.com/warehouse/proto/common"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.MessageResponse{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MessageSendService service

type MessageSendService interface {
	ReceiveMessages(ctx context.Context, in *MessageReceiveRequest, opts ...client.CallOption) (*common.MessageResponse, error)
}

type messageSendService struct {
	c    client.Client
	name string
}

func NewMessageSendService(name string, c client.Client) MessageSendService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chatroom"
	}
	return &messageSendService{
		c:    c,
		name: name,
	}
}

func (c *messageSendService) ReceiveMessages(ctx context.Context, in *MessageReceiveRequest, opts ...client.CallOption) (*common.MessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageSendService.ReceiveMessages", in)
	out := new(common.MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageSendService service

type MessageSendServiceHandler interface {
	ReceiveMessages(context.Context, *MessageReceiveRequest, *common.MessageResponse) error
}

func RegisterMessageSendServiceHandler(s server.Server, hdlr MessageSendServiceHandler, opts ...server.HandlerOption) error {
	type messageSendService interface {
		ReceiveMessages(ctx context.Context, in *MessageReceiveRequest, out *common.MessageResponse) error
	}
	type MessageSendService struct {
		messageSendService
	}
	h := &messageSendServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MessageSendService{h}, opts...))
}

type messageSendServiceHandler struct {
	MessageSendServiceHandler
}

func (h *messageSendServiceHandler) ReceiveMessages(ctx context.Context, in *MessageReceiveRequest, out *common.MessageResponse) error {
	return h.MessageSendServiceHandler.ReceiveMessages(ctx, in, out)
}
