// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chatroom/receiver.proto

/*
Package chatroom is a generated protocol buffer package.

It is generated from these files:
	chatroom/receiver.proto

It has these top-level messages:
	SendMessagesRequest
*/
package chatroom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.srgow.com/warehouse/proto/common"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MessageReceiveService service

type MessageReceiveService interface {
	SendMessages(ctx context.Context, in *SendMessagesRequest, opts ...client.CallOption) (*common.Response, error)
}

type messageReceiveService struct {
	c    client.Client
	name string
}

func NewMessageReceiveService(name string, c client.Client) MessageReceiveService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chatroom"
	}
	return &messageReceiveService{
		c:    c,
		name: name,
	}
}

func (c *messageReceiveService) SendMessages(ctx context.Context, in *SendMessagesRequest, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "MessageReceiveService.SendMessages", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageReceiveService service

type MessageReceiveServiceHandler interface {
	SendMessages(context.Context, *SendMessagesRequest, *common.Response) error
}

func RegisterMessageReceiveServiceHandler(s server.Server, hdlr MessageReceiveServiceHandler, opts ...server.HandlerOption) error {
	type messageReceiveService interface {
		SendMessages(ctx context.Context, in *SendMessagesRequest, out *common.Response) error
	}
	type MessageReceiveService struct {
		messageReceiveService
	}
	h := &messageReceiveServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MessageReceiveService{h}, opts...))
}

type messageReceiveServiceHandler struct {
	MessageReceiveServiceHandler
}

func (h *messageReceiveServiceHandler) SendMessages(ctx context.Context, in *SendMessagesRequest, out *common.Response) error {
	return h.MessageReceiveServiceHandler.SendMessages(ctx, in, out)
}
