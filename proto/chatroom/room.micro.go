// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chatroom/room.proto

/*
Package chatroom is a generated protocol buffer package.

It is generated from these files:
	chatroom/room.proto

It has these top-level messages:
	CreateRoomRequest
	DeleteRoomRequest
	CreateRoomResponse
	AvailableRequest
	Room
	RoomListResponse
*/
package chatroom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.srgow.com/warehouse/proto/common"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RoomService service

type RoomService interface {
	Create(ctx context.Context, in *CreateRoomRequest, opts ...client.CallOption) (*CreateRoomResponse, error)
	Available(ctx context.Context, in *AvailableRequest, opts ...client.CallOption) (*RoomListResponse, error)
	Delete(ctx context.Context, in *DeleteRoomRequest, opts ...client.CallOption) (*common.Response, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chatroom"
	}
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) Create(ctx context.Context, in *CreateRoomRequest, opts ...client.CallOption) (*CreateRoomResponse, error) {
	req := c.c.NewRequest(c.name, "RoomService.Create", in)
	out := new(CreateRoomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Available(ctx context.Context, in *AvailableRequest, opts ...client.CallOption) (*RoomListResponse, error) {
	req := c.c.NewRequest(c.name, "RoomService.Available", in)
	out := new(RoomListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Delete(ctx context.Context, in *DeleteRoomRequest, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "RoomService.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomService service

type RoomServiceHandler interface {
	Create(context.Context, *CreateRoomRequest, *CreateRoomResponse) error
	Available(context.Context, *AvailableRequest, *RoomListResponse) error
	Delete(context.Context, *DeleteRoomRequest, *common.Response) error
}

func RegisterRoomServiceHandler(s server.Server, hdlr RoomServiceHandler, opts ...server.HandlerOption) error {
	type roomService interface {
		Create(ctx context.Context, in *CreateRoomRequest, out *CreateRoomResponse) error
		Available(ctx context.Context, in *AvailableRequest, out *RoomListResponse) error
		Delete(ctx context.Context, in *DeleteRoomRequest, out *common.Response) error
	}
	type RoomService struct {
		roomService
	}
	h := &roomServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomService{h}, opts...))
}

type roomServiceHandler struct {
	RoomServiceHandler
}

func (h *roomServiceHandler) Create(ctx context.Context, in *CreateRoomRequest, out *CreateRoomResponse) error {
	return h.RoomServiceHandler.Create(ctx, in, out)
}

func (h *roomServiceHandler) Available(ctx context.Context, in *AvailableRequest, out *RoomListResponse) error {
	return h.RoomServiceHandler.Available(ctx, in, out)
}

func (h *roomServiceHandler) Delete(ctx context.Context, in *DeleteRoomRequest, out *common.Response) error {
	return h.RoomServiceHandler.Delete(ctx, in, out)
}
